type Book {
  name: String
  abbrv: String
  languages: String
}

type Markdown {
  md: String
  html: String
}

type Meta {
  totalViews: Int
  stats: [Stats]
}

# A connection to a list of items.
type MetaConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MetaEdge]
}

# An edge in a connection.
type MetaEdge {
  # The item at the end of the edge
  node: Song

  # A cursor for use in pagination
  cursor: String!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
  song(id: ID!): Song
  songsMeta(after: String, first: Int, before: String, last: Int, song_id: String, day: Int, week: Int, year: Int, direction: String, _day: Int, _week: Int, _year: Int): MetaConnection
}

type References {
  author: String
  book: String
  year: String
}

type Song implements Node {
  # The ID of an object
  id: ID!
  title: String
  num: Int
  book: Book
  lyrics: String
  lyrics_Markdown: Markdown
  lyrics_Html: String
  tags: String
  videos: String
  references: References
  partitions: String
  language: String
  songId: String
  meta: Meta
}

# A connection to a list of items.
type SongConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SongEdge]

  # A count of the total number of objects in this connection, ignoring pagination.
  # This allows a client to fetch the first five objects by passing "5" as the
  # argument to "first", then fetch the total count so it could display "5 of 83",
  # for example.
  totalCount: Int
}

# An edge in a connection.
type SongEdge {
  # The item at the end of the edge
  node: Song

  # A cursor for use in pagination
  cursor: String!
}

type Stats {
  week: Int
  year: Int
  day: Int
  views: Int
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  songs(after: String, first: Int, before: String, last: Int, book: String, language: String, num: Int, title: String, songId: String, order_by: String): SongConnection
}
