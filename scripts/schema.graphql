type Book {
  name: String
  abbrv: String
  languages: String
}

type Markdown {
  md: String
  html: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

type References {
  author: String
  book: String
  year: String
}

type Song implements Node {
  # The ID of an object
  id: ID!
  title: String
  num: Int
  book: Book
  lyrics: String
  lyrics_Markdown: Markdown
  lyrics_Html: String
  tags: String
  videos: String
  references: References
  partitions: String
  language: String
  songId: String
}

# A connection to a list of items.
type SongConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SongEdge]
}

# An edge in a connection.
type SongEdge {
  # The item at the end of the edge
  node: Song

  # A cursor for use in pagination
  cursor: String!
}

type Viewer {
  songs(after: String, first: Int, before: String, last: Int, book: String, language: String): SongConnection
}
